// Mocks generated by Mockito 5.0.15 from annotations
// in yakwetu/test/chats_view_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:message_chat/message_chat.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yakwetu/src/cores/local_storage/models/chart.dart' as _i5;
import 'package:yakwetu/src/cores/local_storage/models/local_message.dart'
    as _i6;
import 'package:yakwetu/src/modules/chat_inbox/data/chat_inbox_providers.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

/// A class which mocks [IDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDataSource extends _i1.Mock implements _i3.IDataSource {
  MockIDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addChat(_i5.Chat? chat) =>
      (super.noSuchMethod(Invocation.method(#addChat, [chat]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addMessage(_i6.LocalMessage? message) =>
      (super.noSuchMethod(Invocation.method(#addMessage, [message]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i5.Chat?> findChat(String? chatId) =>
      (super.noSuchMethod(Invocation.method(#findChat, [chatId]),
          returnValue: Future<_i5.Chat?>.value()) as _i4.Future<_i5.Chat?>);
  @override
  _i4.Future<List<_i5.Chat>> findAllChats() =>
      (super.noSuchMethod(Invocation.method(#findAllChats, []),
              returnValue: Future<List<_i5.Chat>>.value(<_i5.Chat>[]))
          as _i4.Future<List<_i5.Chat>>);
  @override
  _i4.Future<void> updateMessage(_i6.LocalMessage? message) =>
      (super.noSuchMethod(Invocation.method(#updateMessage, [message]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i6.LocalMessage>> findMessages(String? chatId) =>
      (super.noSuchMethod(Invocation.method(#findMessages, [chatId]),
              returnValue:
                  Future<List<_i6.LocalMessage>>.value(<_i6.LocalMessage>[]))
          as _i4.Future<List<_i6.LocalMessage>>);
  @override
  _i4.Future<void> deleteChat(String? chatId) =>
      (super.noSuchMethod(Invocation.method(#deleteChat, [chatId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateMessageReceipt(
          String? messageId, _i2.ReceiptStatus? status) =>
      (super.noSuchMethod(
          Invocation.method(#updateMessageReceipt, [messageId, status]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IUserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserService extends _i1.Mock implements _i2.IUserService {
  MockIUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> connect(_i2.User? user) =>
      (super.noSuchMethod(Invocation.method(#connect, [user]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  _i4.Future<List<_i2.User>> online() =>
      (super.noSuchMethod(Invocation.method(#online, []),
              returnValue: Future<List<_i2.User>>.value(<_i2.User>[]))
          as _i4.Future<List<_i2.User>>);
  @override
  _i4.Future<void> disconnect(_i2.User? user) =>
      (super.noSuchMethod(Invocation.method(#disconnect, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.User> fetch(String? id) =>
      (super.noSuchMethod(Invocation.method(#fetch, [id]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  String toString() => super.toString();
}
